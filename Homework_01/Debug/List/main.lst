###############################################################################
#
# IAR C/C++ Compiler V7.20.1.997/W32 for MSP430           20/Jan/2021  21:55:16
# Copyright 1996-2020 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.20
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        D:\Google Drive - NCSU\ECE306\Current\Homework\HW1\Homework 01
#        Simple\main.c
#    Command line  =  
#        -f C:\Users\adadt\AppData\Local\Temp\EWD29.tmp ("D:\Google Drive -
#        NCSU\ECE306\Current\Homework\HW1\Homework 01 Simple\main.c" -lC
#        "D:\Google Drive - NCSU\ECE306\Current\Homework\HW1\Homework 01
#        Simple\Debug\List" -o "D:\Google Drive -
#        NCSU\ECE306\Current\Homework\HW1\Homework 01 Simple\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\430\lib\dlib\dl430xlsfn.h" -I
#        ./ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        D:\Google Drive - NCSU\ECE306\Current\Homework\HW1\Homework 01
#        Simple\Debug\List\main.lst
#    Object file   =  
#        D:\Google Drive - NCSU\ECE306\Current\Homework\HW1\Homework 01
#        Simple\Debug\Obj\main.r43
#
###############################################################################

D:\Google Drive - NCSU\ECE306\Current\Homework\HW1\Homework 01 Simple\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          
     16          #define ALWAYS                  (1)
     17          #define RESET_STATE             (0)
     18          #define RED_LED              (0x01) // RED LED 0
     19          #define GRN_LED              (0x40) // GREEN LED 1
     20          
     21          // Function Prototypes
     22          void main(void);
     23          void Init_Conditions(void);
     24          void Init_LEDs(void);
     25          
     26            // Global Variables
     27          extern char display_line[4][11];
     28          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     30          extern volatile unsigned char display_changed;
     31          extern volatile unsigned char update_display;
     32          extern volatile unsigned int Time_Sequence;
     33          extern volatile char one_time;
     34          

   \                                 In  segment CODE, align 2
     35          void main(void){
   \                     main:
     36          //------------------------------------------------------------------------------
     37          // Main Program
     38          // This is the main routine for the program. Execution of code starts here.
     39          // The operating system is Back Ground Fore Ground.
     40          //
     41          //------------------------------------------------------------------------------
     42          // Disable the GPIO power-on default high-impedance mode to activate
     43          // previously configured port settings
     44            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     45            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     46            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     47            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     48            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     49            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     50          // Place the contents of what you want on the display, in between the quotes
     51          // Limited to 10 characters per line
     52          //
     53          
     54            strcpy(display_line[0], "   NCSU   ");
   \   000018   3D40....     MOV.W   #`?<Constant "   NCSU   ">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     55            update_string(display_line[0], 0);
   \   000024   0D43         MOV.W   #0x0, R13
   \   000026   ........     CALLA   #update_string
     56            strcpy(display_line[1], " WOLFPACK ");
   \   00002A   3D40....     MOV.W   #`?<Constant " WOLFPACK ">`, R13
   \   00002E   3C40....     MOV.W   #display_line + 11, R12
   \   000032   ........     CALLA   #strcpy
     57            update_string(display_line[1], 1);
   \   000036   1D43         MOV.W   #0x1, R13
   \   000038   3C40....     MOV.W   #display_line + 11, R12
   \   00003C   ........     CALLA   #update_string
     58            strcpy(display_line[2], "  ECE306  ");
   \   000040   3D40....     MOV.W   #`?<Constant "  ECE306  ">`, R13
   \   000044   3C40....     MOV.W   #display_line + 22, R12
   \   000048   ........     CALLA   #strcpy
     59            update_string(display_line[3], 3);
   \   00004C   3D400300     MOV.W   #0x3, R13
   \   000050   3C40....     MOV.W   #display_line + 33, R12
   \   000054   ........     CALLA   #update_string
     60            enable_display_update();
   \   000058   ........     CALLA   #enable_display_update
     61          //  Display_Update(3,1,0,0);
     62          
     63          //------------------------------------------------------------------------------
     64          // Begining of the "While" Operating System
     65          //------------------------------------------------------------------------------
     66            while(ALWAYS) {                      // Can the Operating system run
     67              switch(Time_Sequence){
   \                     ??main_0:
   \   00005C   1F42....     MOV.W   &Time_Sequence, R15
   \   000060   3F803200     SUB.W   #0x32, R15
   \   000064   3B24         JEQ     ??main_7
   \   000066   3F803200     SUB.W   #0x32, R15
   \   00006A   2B24         JEQ     ??main_8
   \   00006C   3F803200     SUB.W   #0x32, R15
   \   000070   1D24         JEQ     ??main_9
   \   000072   3F803200     SUB.W   #0x32, R15
   \   000076   1124         JEQ     ??main_10
   \   000078   3F803200     SUB.W   #0x32, R15
   \   00007C   3920         JNE     ??main_6
     68                case 250:                        //
     69                  if(one_time){
   \   00007E   C293....     CMP.B   #0x0, &one_time
   \   000082   0824         JEQ     ??main_11
     70                    Init_LEDs();
   \   000084   ........     CALLA   #Init_LEDs
     71                    lcd_BIG_mid();
   \   000088   ........     CALLA   #lcd_BIG_mid
     72                    display_changed = 1;
   \   00008C   D243....     MOV.B   #0x1, &display_changed
     73                    one_time = 0;
   \   000090   C243....     MOV.B   #0x0, &one_time
     74                  }
     75                  Time_Sequence = 0;             //
   \                     ??main_11:
   \   000094   8243....     MOV.W   #0x0, &Time_Sequence
     76                  break;
   \   000098   2B3C         JMP     ??main_6
     77                case 200:                        //
     78                  if(one_time){
   \                     ??main_10:
   \   00009A   C293....     CMP.B   #0x0, &one_time
   \   00009E   2824         JEQ     ??main_6
     79                    P6OUT |= GRN_LED;            // Change State of LED 5
   \   0000A0   F2D040004302 BIS.B   #0x40, &0x243
     80                    one_time = 0;
   \   0000A6   C243....     MOV.B   #0x0, &one_time
     81                  }
     82                  break;
   \   0000AA   223C         JMP     ??main_6
     83                case 150:                         //
     84                  if(one_time){
   \                     ??main_9:
   \   0000AC   C293....     CMP.B   #0x0, &one_time
   \   0000B0   1F24         JEQ     ??main_6
     85                    P1OUT |= RED_LED;            // Change State of LED 4
   \   0000B2   D2D30202     BIS.B   #0x1, &0x202
     86                    P6OUT &= ~GRN_LED;           // Change State of LED 5
   \   0000B6   F2C040004302 BIC.B   #0x40, &0x243
     87                    one_time = 0;
   \   0000BC   C243....     MOV.B   #0x0, &one_time
     88                  }
     89                  break;
   \   0000C0   173C         JMP     ??main_6
     90                case 100:                         //
     91                  if(one_time){
   \                     ??main_8:
   \   0000C2   C293....     CMP.B   #0x0, &one_time
   \   0000C6   1424         JEQ     ??main_6
     92                    lcd_4line();
   \   0000C8   ........     CALLA   #lcd_4line
     93                    P6OUT |= GRN_LED;            // Change State of LED 5
   \   0000CC   F2D040004302 BIS.B   #0x40, &0x243
     94                    display_changed = 1;
   \   0000D2   D243....     MOV.B   #0x1, &display_changed
     95                    one_time = 0;
   \   0000D6   C243....     MOV.B   #0x0, &one_time
     96                  }
     97                  break;
   \   0000DA   0A3C         JMP     ??main_6
     98                case  50:                        //
     99                  if(one_time){
   \                     ??main_7:
   \   0000DC   C293....     CMP.B   #0x0, &one_time
   \   0000E0   0724         JEQ     ??main_6
    100                    P1OUT &= ~RED_LED;           // Change State of LED 4
   \   0000E2   D2C30202     BIC.B   #0x1, &0x202
    101                    P6OUT &= ~GRN_LED;           // Change State of LED 5
   \   0000E6   F2C040004302 BIC.B   #0x40, &0x243
    102                    one_time = 0;
   \   0000EC   C243....     MOV.B   #0x0, &one_time
    103                  }
    104                  break;                         //
    105                default: break;
    106              }
    107              Switches_Process();                // Check for switch state change
   \                     ??main_6:
   \   0000F0   ........     CALLA   #Switches_Process
    108              Display_Process();
   \   0000F4   ........     CALLA   #Display_Process
   \   0000F8   B13F         JMP     ??main_0
   \   0000FA   0343         NOP
   \   0000FC                REQUIRE _A_PM5CTL0_L
   \   0000FC                REQUIRE _A_PCOUT_L
   \   0000FC                REQUIRE _A_PAOUT_L
    109          
    110            }
    111          //------------------------------------------------------------------------------
    112          }
    113          

   \                                 In  segment CODE, align 2
    114          void Init_Conditions(void){
   \                     Init_Conditions:
   \   000000   0A12         PUSH.W  R10
    115          //------------------------------------------------------------------------------
    116            int i;
    117          
    118            for(i=0;i<11;i++){
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??Init_Conditions_0:
   \   000004   3A900B00     CMP.W   #0xb, R10
   \   000008   0A34         JGE     ??Init_Conditions_1
    119              display_line[0][i] = RESET_STATE;
   \   00000A   CA43....     MOV.B   #0x0, display_line(R10)
    120              display_line[1][i] = RESET_STATE;
   \   00000E   CA43....     MOV.B   #0x0, display_line + 11(R10)
    121              display_line[2][i] = RESET_STATE;
   \   000012   CA43....     MOV.B   #0x0, display_line + 22(R10)
    122              display_line[3][i] = RESET_STATE;
   \   000016   CA43....     MOV.B   #0x0, display_line + 33(R10)
    123            }
   \   00001A   1A53         ADD.W   #0x1, R10
   \   00001C   F33F         JMP     ??Init_Conditions_0
    124            display_line[0][10] = 0;
   \                     ??Init_Conditions_1:
   \   00001E   C243....     MOV.B   #0x0, &display_line + 10
    125            display_line[1][10] = 0;
   \   000022   C243....     MOV.B   #0x0, &display_line + 21
    126            display_line[2][10] = 0;
   \   000026   C243....     MOV.B   #0x0, &display_line + 32
    127            display_line[3][10] = 0;
   \   00002A   C243....     MOV.B   #0x0, &display_line + 43
    128          
    129            display[0] = &display_line[0][0];
   \   00002E   B240........ MOV.W   #display_line, &display
    130            display[1] = &display_line[1][0];
   \   000034   B240........ MOV.W   #display_line + 11, &display + 2
    131            display[2] = &display_line[2][0];
   \   00003A   B240........ MOV.W   #display_line + 22, &display + 4
    132            display[3] = &display_line[3][0];
   \   000040   B240........ MOV.W   #display_line + 33, &display + 6
    133            update_display = 0;
   \   000046   C243....     MOV.B   #0x0, &update_display
    134          // Interrupts are disabled by default, enable them.
    135            enable_interrupts();
   \   00004A   ........     CALLA   #enable_interrupts
    136          //------------------------------------------------------------------------------
    137          }
   \   00004E   3A41         POP.W   R10
   \   000050   1001         RETA
    138          

   \                                 In  segment CODE, align 2
    139          void Init_LEDs(void){
   \                     Init_LEDs:
    140          //------------------------------------------------------------------------------
    141          // LED Configurations
    142          //------------------------------------------------------------------------------
    143          // Turns on both LEDs
    144            P1OUT &= ~RED_LED;
   \   000000   D2C30202     BIC.B   #0x1, &0x202
    145            P6OUT &= ~GRN_LED;
   \   000004   F2C040004302 BIC.B   #0x40, &0x243
    146          //------------------------------------------------------------------------------
    147          }
   \   00000A   1001         RETA
   \   00000C                REQUIRE _A_PAOUT_L
   \   00000C                REQUIRE _A_PCOUT_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   NCSU   ">`:
   \   000000   2020204E4353 DC8 "   NCSU   "
   \            5520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WOLFPACK ">`:
   \   000000   20574F4C4650 DC8 " WOLFPACK "
   \            41434B2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ECE306  ">`:
   \   000000   202045434533 DC8 "  ECE306  "
   \            3036202000  
    148          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Init_Conditions
        6   -> enable_interrupts
      4   Init_LEDs
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Switches_Process
        4   -> enable_display_update
        4   -> lcd_4line
        4   -> lcd_BIG_mid
        4   -> strcpy
        4   -> update_string


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "   NCSU   ">
      11  ?<Constant "  ECE306  ">
      11  ?<Constant " WOLFPACK ">
      82  Init_Conditions
      12  Init_LEDs
       2  _A_PAOUT_L
       2  _A_PCOUT_L
       2  _A_PM5CTL0_L
       1  display_mode
     252  main

 
 346 bytes in segment CODE
   6 bytes in segment DATA16_AN
  33 bytes in segment DATA16_C
   1 byte  in segment DATA16_Z
 
 346 bytes of CODE  memory
  33 bytes of CONST memory
   1 byte  of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
